import { Request, Response, NextFunction } from 'express'
import { logger } from '../utils/logger'

export interface ClientRequest extends Request {
  clientId?: string
  clientData?: {
    id: string
    name: string
    domain?: string
    settings?: any
    active?: boolean
  }
}

/**
 * Middleware to detect and validate client context from domain or headers
 * FALLBACK VERSION - Works without database connection
 */
export async function clientValidation(req: ClientRequest, res: Response, next: NextFunction) {
  try {
    let clientId: string | null = null
    
    // 1. Check for explicit client ID in headers (for API calls)
    if (req.headers['x-client-id']) {
      clientId = req.headers['x-client-id'] as string
    }
    
    // 2. Check for subdomain-based client detection
    if (!clientId && req.hostname) {
      const subdomain = req.hostname.split('.')[0]
      if (subdomain && subdomain !== 'www' && subdomain !== req.hostname) {
        clientId = subdomain
      }
    }
    
    // 3. For now, use default client if no specific client is found
    if (!clientId) {
      clientId = 'ccl-default'
    }
    
    // 4. Set default client data (fallback without database)
    if (clientId) {
      req.clientId = clientId
      req.clientData = {
        id: clientId,
        name: 'Complete Car Loans',
        domain: req.hostname,
        settings: {
          branding: {
            companyName: 'Complete Car Loans',
            primaryColor: '#1e40af',
            secondaryColor: '#64748b',
            emailFromName: 'Complete Car Loans Team',
            supportEmail: 'support@completecarloans.com'
          }
        },
        active: true
      }
    }
    
    next()
  } catch (error) {
    logger.error('Client validation error:', error)
    // Set default client on error
    req.clientId = 'ccl-default'
    req.clientData = {
      id: 'ccl-default',
      name: 'Complete Car Loans',
      domain: req.hostname,
      settings: {},
      active: true
    }
    next()
  }
}

/**
 * Middleware to require valid client context
 */
export function requireClient(req: ClientRequest, res: Response, next: NextFunction) {
  if (!req.clientId || !req.clientData) {
    return res.status(400).json({
      success: false,
      error: 'Valid client context required'
    })
  }
  next()
}

/**
 * Middleware to add client_id to database queries
 */
export function addClientFilter(req: ClientRequest, res: Response, next: NextFunction) {
  if (req.clientId) {
    // Add client filter to query parameters
    req.query.client_id = req.clientId
  }
  next()
}

/**
 * Utility to get client ID from request
 */
export function getClientId(req: ClientRequest): string | null {
  return req.clientId || null
}

/**
 * Utility to ensure client isolation in database operations
 */
export function ensureClientIsolation(data: any, clientId: string | null): any {
  if (clientId && typeof data === 'object' && data !== null) {
    return { ...data, client_id: clientId }
  }
  return data
}